<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.project.gym.mapper.MembershipMapper">

    <insert id="insertMembership" parameterType="com.project.gym.domain.Membership">
        INSERT INTO MEMBERSHIP (
            MEMBERSHIP_ID, MEMBER_ID, MEMBERSHIP_TYPE, PERIOD_DAYS,
            START_DATE, END_DATE, PRICE
        ) VALUES (
            SEQ_MEMBERSHIP_ID.NEXTVAL,
            #{memberId},
            #{membershipType},
            #{periodDays},
            #{startDate},
            #{endDate},
            #{price}
        )

    </insert>


    <select id="findAllMemberships" resultType="com.project.gym.domain.Membership">
        SELECT
            m.MEMBERSHIP_ID,
            m.MEMBER_ID,
            mem.NAME                    AS MEMBER_NAME,
            m.MEMBERSHIP_TYPE,
            m.PERIOD_DAYS,
            m.START_DATE,
            m.END_DATE,
            m.PRICE,
            m.MEMBERSHIP_STATUS,
            m.CREATED_AT,
            m.UPDATED_AT
        FROM
            MEMBERSHIP m
        JOIN
            MEMBER mem
        ON
            m.MEMBER_ID = mem.MEMBER_ID
        ORDER BY
            m.MEMBERSHIP_ID DESC
    </select>

    <select id="findById" resultType="com.project.gym.domain.Membership">
        SELECT
            m.MEMBERSHIP_ID,
            m.MEMBER_ID,
            m.MEMBERSHIP_TYPE,
            m.PERIOD_DAYS,
            m.START_DATE,
            m.END_DATE,
            m.PRICE,
            m.MEMBERSHIP_STATUS,
            m.CREATED_AT,
            m.UPDATED_AT,
            mem.NAME                    AS memberName
        FROM
            MEMBERSHIP m
        JOIN
            MEMBER mem
        ON
            m.MEMBER_ID = mem.MEMBER_ID
        WHERE
            MEMBERSHIP_ID = #{membershipId}
    </select>

    <update id="updateMembership" parameterType="com.project.gym.domain.Membership">
        UPDATE MEMBERSHIP
        SET
            START_DATE = #{startDate, jdbcType=DATE},
            END_DATE = #{endDate, jdbcType=DATE},
            MEMBERSHIP_STATUS = #{membershipStatus},
            UPDATED_AT = SYSDATE
            <if test="membershipStatus == 2">
                , SUSPEND_START_DATE = #{suspendStartDate, jdbcType=DATE}
                , SUSPEND_END_DATE = #{suspendEndDate, jdbcType=DATE}
                , REMAINING_DAYS = #{remainingDays}
                , EXTENDED_END_DATE = #{extendedEndDate, jdbcType=DATE}
            </if>

            <if test="membershipStatus != 2">
                , SUSPEND_START_DATE = NULL
                , SUSPEND_END_DATE = NULL
                , REMAINING_DAYS = NULL
                , EXTENDED_END_DATE = NULL
            </if>
        WHERE
            MEMBERSHIP_ID = #{membershipId}
    </update>

    <insert id="insertSuspendHistory" parameterType="com.project.gym.domain.MembershipSuspendHistory">
        INSERT INTO MEMBERSHIP_SUSPEND_HISTORY (
            HISTORY_ID,
            MEMBERSHIP_ID,
            SUSPEND_START_DATE,
            SUSPEND_END_DATE,
            RECORDED_AT,
            RECORDED_BY
        ) VALUES (
            SEQ_SUSPEND_HISTORY.NEXTVAL,
            #{membershipId},
            #{suspendStartDate, jdbcType=DATE},
            #{suspendEndDate, jdbcType=DATE},
            SYSDATE,
            #{recordedBy}
        )
    </insert>

    <!-- membershipStatus == 1(이용중) & 2(정지) 상태인 경우만 조회 -->
    <select id="findAllActiveMemberships" resultType="com.project.gym.domain.Membership">
        SELECT
            m.MEMBERSHIP_ID,
            m.MEMBER_ID,
            mem.NAME                    AS MEMBER_NAME,
            m.MEMBERSHIP_TYPE,
            m.PERIOD_DAYS,
            m.START_DATE,
            m.END_DATE,
            m.PRICE,
            m.MEMBERSHIP_STATUS,
            m.CREATED_AT,
            m.UPDATED_AT,
            m.SUSPEND_START_DATE,
            m.SUSPEND_END_DATE,
            m.REMAINING_DAYS,
            m.EXTENDED_END_DATE
        FROM MEMBERSHIP m
        JOIN MEMBER mem
        ON
            m.MEMBER_ID = mem.MEMBER_ID
        WHERE
            m.MEMBERSHIP_STATUS IN (1,2)
    </select>

    <!-- 이용기간 지난 회원권 상태 종료(4)로 변경 -->
    <update id="markMembershipsAsExpired">
        UPDATE MEMBERSHIP
        SET
            MEMBERSHIP_STATUS = 4,
            UPDATED_AT = SYSDATE
        WHERE MEMBERSHIP_ID IN
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>


    </update>




</mapper>