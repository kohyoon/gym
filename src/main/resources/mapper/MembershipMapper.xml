<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.project.gym.mapper.MembershipMapper">

    <!-- 회원권 등록 -->
    <insert id="insertMembership" parameterType="com.project.gym.dto.membership.MembershipCreateFormDTO">
        INSERT INTO MEMBERSHIP (
            MEMBERSHIP_ID, MEMBER_ID, MEMBERSHIP_TYPE,
            PERIOD_DAYS, START_DATE, END_DATE, PRICE, CREATED_AT, CREATED_BY, PAYMENT_METHOD
        ) VALUES (
            SEQ_MEMBERSHIP_ID.NEXTVAL, #{memberId}, #{membershipType},
            #{periodDays}, #{startDate}, #{endDate}, #{price}, SYSDATE, #{createdBy}, #{paymentMethod}
        )

    </insert>

    <!-- 회원권 전체 조회 -->
    <select id="findAllMemberships" resultType="com.project.gym.domain.Membership">
        SELECT
            m.MEMBERSHIP_ID,
            m.MEMBER_ID,
            mem.MEMBER_NAME,
            m.MEMBERSHIP_TYPE,
            m.PERIOD_DAYS,
            m.START_DATE,
            m.END_DATE,
            m.PRICE,
            m.MEMBERSHIP_STATUS,
            m.CREATED_AT,
            m.UPDATED_AT,
            m.CREATED_BY,
            ca.ADMIN_NAME AS CREATED_BY_NAME,
            m.UPDATED_BY,
            ua.ADMIN_NAME AS UPDATED_BY_NAME,
            m.PAYMENT_METHOD
        FROM
            MEMBERSHIP m
        JOIN MEMBER mem ON m.MEMBER_ID = mem.MEMBER_ID
        JOIN ADMIN ca ON m.CREATED_BY = ca.ADMIN_ID
        LEFT JOIN ADMIN ua ON m.UPDATED_BY = ua.ADMIN_ID
        ORDER BY
            m.MEMBERSHIP_ID DESC
    </select>

    <!-- MEMBER_ID로 회원권 목록 조회 -->
    <select id="findMembershipByMemberId" resultType="com.project.gym.domain.Membership">
        SELECT
            m.MEMBERSHIP_ID,
            m.MEMBER_ID,
            mem.MEMBER_NAME,
            m.MEMBERSHIP_TYPE,
            m.PERIOD_DAYS,
            m.START_DATE,
            m.END_DATE,
            m.PRICE,
            m.MEMBERSHIP_STATUS,
            m.CREATED_AT,
            m.UPDATED_AT,
            m.CREATED_BY,
            ca.ADMIN_NAME AS CREATED_BY_NAME,
            m.UPDATED_BY,
            ua.ADMIN_NAME AS UPDATED_BY_NAME,
            m.PAYMENT_METHOD
        FROM MEMBERSHIP m
        JOIN MEMBER mem ON m.MEMBER_ID = mem.MEMBER_ID
        JOIN ADMIN ca ON m.CREATED_BY = ca.ADMIN_ID
        LEFT JOIN ADMIN ua ON m.UPDATED_BY = ua.ADMIN_ID
        WHERE MEMBER_ID = #{memberId}
    </select>

    <!-- MEMBERSHIP_ID로 회원권 조회 -->
    <select id="findById" resultType="com.project.gym.domain.Membership">
        SELECT
            m.MEMBERSHIP_ID,
            m.MEMBER_ID,
            mem.MEMBER_NAME,
            m.MEMBERSHIP_TYPE,
            m.PERIOD_DAYS,
            m.START_DATE,
            m.END_DATE,
            m.PRICE,
            m.MEMBERSHIP_STATUS,
            m.CREATED_AT,
            m.UPDATED_AT,
            m.CREATED_BY,
            ca.ADMIN_NAME AS CREATED_BY_NAME,
            m.UPDATED_BY,
            ua.ADMIN_NAME AS UPDATED_BY_NAME,
            m.PAYMENT_METHOD
        FROM MEMBERSHIP m
        JOIN MEMBER mem ON m.MEMBER_ID = mem.MEMBER_ID
        JOIN ADMIN ca ON m.CREATED_BY = ca.ADMIN_ID
        LEFT JOIN ADMIN ua ON m.UPDATED_BY = ua.ADMIN_ID
        WHERE
            MEMBERSHIP_ID = #{membershipId}
    </select>

    <!-- MEMBERSHIP 테이블 수정 -->
    <update id="updateMembership" parameterType="com.project.gym.domain.Membership">
        UPDATE MEMBERSHIP
        SET
            START_DATE = #{startDate, jdbcType=DATE},
            END_DATE = #{endDate, jdbcType=DATE},
            MEMBERSHIP_STATUS = #{membershipStatus},
            UPDATED_AT = SYSDATE
        WHERE
            MEMBERSHIP_ID = #{membershipId}
    </update>

    <!-- MEMBERSHIP 환불 -->
    <update id="refundMembership">
        UPDATE MEMBERSHIP
        SET
            MEMBERSHIP_STATUS = 'REFUND',
            UPDATED_AT = SYSDATE,
            UPDATED_BY = #{updatedBy}
        WHERE
            MEMBERSHIP_ID = #{membershipId}
    </update>

    <!-- membershipStatus == 1(이용중) & 2(정지) 상태인 경우만 조회 -->
    <select id="findAllActiveMemberships" resultType="com.project.gym.domain.Membership">
        SELECT
            m.MEMBERSHIP_ID,
            m.MEMBER_ID,
            mem.MEMBER_NAME,
            m.MEMBERSHIP_TYPE,
            m.PERIOD_DAYS,
            m.START_DATE,
            m.END_DATE,
            m.PRICE,
            m.MEMBERSHIP_STATUS,
            m.CREATED_AT,
            m.UPDATED_AT,
            m.CREATED_BY,
            m.UPDATED_BY,

            ca.ADMIN_NAME AS CREATED_BY_NAME,
            ua.ADMIN_NAME AS UPDATED_BY_NAME,
            m.PAYMENT_METHOD
        FROM MEMBERSHIP m
        JOIN MEMBER mem ON m.MEMBER_ID = mem.MEMBER_ID
        JOIN ADMIN ca ON m.CREATED_BY = ca.ADMIN_ID
        LEFT JOIN ADMIN ua ON m.UPDATED_BY = ua.ADMIN_ID
        WHERE
            m.MEMBERSHIP_STATUS = 'ACTIVE' OR m.MEMBERSHIP_STATUS = 'SUSPENDED'
    </select>

    <!-- 이용기간 지난 회원권 상태 종료(FINISHED)로 변경 -->
    <update id="markMembershipsAsExpired">
        UPDATE MEMBERSHIP
        SET
            MEMBERSHIP_STATUS = 'FINISHED',
            UPDATED_AT = SYSDATE
        WHERE MEMBERSHIP_ID IN
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </update>
    
    <!-- 정지 선택시 : MEMBERSHIP 테이블 수정 (EXTENDED_END_DATE 설정) -->
    <update id="updateStatusAndExtendedEndDate" parameterType="com.project.gym.domain.Membership">
        UPDATE MEMBERSHIP
        SET
            MEMBERSHIP_STATUS = 'SUSPENDED',
            EXTENDED_END_DATE = #{extendedEndDate, jdbcType=DATE},
            UPDATED_AT = SYSDATE,
            UPDATED_BY = #{updatedBy}
        WHERE MEMBERSHIP_ID = #{membershipId}
    </update>
    



</mapper>