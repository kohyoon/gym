<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.project.gym.mapper.MembershipMapper">

    <!-- 회원권 등록 -->
    <insert id="insertMembership" parameterType="com.project.gym.dto.membership.MembershipCreateFormDTO">
        INSERT INTO MEMBERSHIP (
            MEMBERSHIP_ID, MEMBER_ID, MEMBERSHIP_TYPE,
            PERIOD_DAYS, START_DATE, END_DATE, PRICE, CREATED_AT, CREATED_BY, PAYMENT_METHOD
        ) VALUES (
            SEQ_MEMBERSHIP_ID.NEXTVAL, #{memberId}, #{membershipType},
            #{periodDays}, #{startDate}, #{endDate}, #{price}, SYSDATE, #{createdBy}, #{paymentMethod}
        )

    </insert>

    <!-- 회원권 목록 조회 -->
    <select id="selectMembershipList"
            parameterType="com.project.gym.dto.membership.MembershipSearchCriteria"
            resultType="com.project.gym.dto.membership.MembershipListDTO">
        SELECT
            m.MEMBERSHIP_ID,
            m.MEMBER_ID,
            mem.MEMBER_NAME,
            m.MEMBERSHIP_TYPE,
            m.PERIOD_DAYS,
            m.START_DATE,
            m.END_DATE,
            m.PRICE,
            m.MEMBERSHIP_STATUS,
            m.CREATED_AT,
            m.UPDATED_AT,
            m.CREATED_BY,
            ca.ADMIN_NAME AS CREATED_BY_NAME,
            m.UPDATED_BY,
            ua.ADMIN_NAME AS UPDATED_BY_NAME,
            m.PAYMENT_METHOD
        FROM
            MEMBERSHIP m
        JOIN MEMBER mem ON m.MEMBER_ID = mem.MEMBER_ID
        JOIN ADMIN ca ON m.CREATED_BY = ca.ADMIN_ID
        LEFT JOIN ADMIN ua ON m.UPDATED_BY = ua.ADMIN_ID
        <where>
            <!-- 통합 키워드 -->
            <if test="keyword != null and keyword != ''">
                (   mem.MEMBER_NAME LIKE '%' || LOWER(#{keyword}) || '%'
                    OR LOWER(mem.MEMBER_LOGIN_ID) LIKE '%' || LOWER(#{keyword}) || '%'
                    OR LOWER(mem.EMAIL) LIKE '%' || LOWER(#{keyword}) || '%'
                    OR mem.PHONE LIKE '%' || LOWER(#{keyword}) || '%'
                )
            </if>

            <if test="memberId != null">
                AND m.MEMBER_ID = #{memberId}
            </if>

            <if test="membershipId != null">
                AND m.MEMBERSHIP_ID = #{membershipId}
            </if>

            <!-- 상태 다중 선택 -->
            <if test="membershipStatuses != null and membershipStatuses.size() > 0">
                AND m.MEMBERSHIP_STATUS IN
                <foreach item="s" collection="membershipStatuses" open="(" separator="," close=")">
                    #{s}
                </foreach>
            </if>

            <!-- 유형 다중 선택 -->
            <if test="types != null and types.size() > 0">
                AND m.MEMBERSHIP_TYPE IN
                <foreach item="t" collection="types" open="(" separator="," close=")">
                    #{t}
                </foreach>
            </if>

            <!-- 날짜 범위 -->
            <if test="startDateFrom != null">
                AND m.START_DATE &gt;= #{startDateFrom}
            </if>
            <if test="startDateTo != null">
                AND m.START_DATE &lt;= #{startDateTo}
            </if>
            <if test="endDateFrom != null">
                AND m.END_DATE &gt;= #{endDateFrom}
            </if>
            <if test="endDateTo != null">
                AND m.END_DATE &lt;= #{endDateTo}
            </if>
            <if test="createdFrom != null">
                AND m.CREATED_AT &gt;= #{createdFrom}
            </if>
            <if test="createdTo != null">
                AND m.CREATED_AT &lt;= #{createdTo}
            </if>

            <!-- 가격 -->
            <if test="priceMin != null">
                AND m.price &gt;= #{priceMin}
            </if>
            <if test="priceMax != null">
                AND m.PRICE &lt;= #{priceMax}
            </if>

            <!-- 남은 일수 (오늘 포함 기준: END_DATE - TRUNC(SYSDATE) + 1 -->
            <if test="remainingDaysMax != null">
                AND (m.END_DATE - TRUNC(SYSDATE) + 1) &lt;= #{remainingDaysMax}
            </if>

            <!-- 등록 관리자 -->
            <if test="createdBy != null">
                AND m.CREATED_BY = #{createdBy}
            </if>
        </where>

        <!-- 정렬 -->
        <choose>
            <when test="sortBy != null and sortBy != ''">
                ORDER BY ${sortBy} ${sortDir != null ? sortDir : 'ASC'}
            </when>
            <otherwise>
                ORDER BY m.END_DATE ASC, m.CREATED_AT DESC
            </otherwise>
        </choose>
        OFFSET #{offset} ROWS FETCH NEXT #{size} ROWS ONLY
    </select>


    <!-- 조회 항목 개수 -->
    <select id="countMembershipList"
            parameterType="com.project.gym.dto.membership.MembershipSearchCriteria"
            resultType="int">
        SELECT COUNT(*)
        FROM
        MEMBERSHIP m
        JOIN MEMBER mem ON m.MEMBER_ID = mem.MEMBER_ID
        JOIN ADMIN ca ON m.CREATED_BY = ca.ADMIN_ID
        LEFT JOIN ADMIN ua ON m.UPDATED_BY = ua.ADMIN_ID
        <where>
            <!-- 통합 키워드 -->
            <if test="keyword != null and keyword != ''">
                (
                LOWER(mem.MEMBER_NAME) LIKE '%' || LOWER(#{keyword}) || '%'
                OR LOWER(mem.MEMBER_LOGIN_ID) LIKE '%' || LOWER(#{keyword}) || '%'
                OR LOWER(mem.EMAIL) LIKE '%' || LOWER(#{keyword}) || '%'
                OR mem.PHONE LIKE '%' || #{keyword} || '%'
                )
            </if>

            <if test="memberId != null">
                AND m.MEMBER_ID = #{memberId}
            </if>

            <if test="membershipId != null">
                AND m.MEMBERSHIP_ID = #{membershipId}
            </if>

            <!-- 상태 다중 선택 -->
            <if test="membershipStatuses != null and membershipStatuses.size() > 0">
                AND m.MEMBERSHIP_STATUS IN
                <foreach item="s" collection="membershipStatuses" open="(" separator="," close=")">
                    #{s}
                </foreach>
            </if>

            <!-- 유형 다중 선택 -->
            <if test="types != null and types.size() > 0">
                AND m.MEMBERSHIP_TYPE IN
                <foreach item="t" collection="types" open="(" separator="," close=")">
                    #{t}
                </foreach>
            </if>

            <!-- 날짜 범위 -->
            <if test="startDateFrom != null">
                AND m.START_DATE &gt;= #{startDateFrom}
            </if>
            <if test="startDateTo != null">
                AND m.START_DATE &lt;= #{startDateTo}
            </if>
            <if test="endDateFrom != null">
                AND m.END_DATE &gt;= #{endDateFrom}
            </if>
            <if test="endDateTo != null">
                AND m.END_DATE &lt;= #{endDateTo}
            </if>
            <if test="createdFrom != null">
                AND m.CREATED_AT &gt;= #{createdFrom}
            </if>
            <if test="createdTo != null">
                AND m.CREATED_AT &lt;= #{createdTo}
            </if>

            <!-- 가격 -->
            <if test="priceMin != null">
                AND m.PRICE &gt;= #{priceMin}
            </if>
            <if test="priceMax != null">
                AND m.PRICE &lt;= #{priceMax}
            </if>

            <!-- 남은 일수 -->
            <if test="remainingDaysMax != null">
                AND (m.END_DATE - TRUNC(SYSDATE) + 1) &lt;= #{remainingDaysMax}
            </if>

            <!-- 등록 관리자 -->
            <if test="createdBy != null">
                AND m.CREATED_BY = #{createdBy}
            </if>
        </where>
    </select>

    <!-- -->
    <select id="findById" resultType="com.project.gym.domain.Membership">
        SELECT
            m.MEMBERSHIP_ID,
            m.MEMBER_ID,
            mem.MEMBER_NAME,
            m.MEMBERSHIP_TYPE,
            m.PERIOD_DAYS,
            m.START_DATE,
            m.END_DATE,
            m.PRICE,
            m.MEMBERSHIP_STATUS,
            m.CREATED_AT,
            m.UPDATED_AT,
            m.CREATED_BY,
            ca.ADMIN_NAME AS CREATED_BY_NAME,
            m.UPDATED_BY,
            ua.ADMIN_NAME AS UPDATED_BY_NAME,
            m.PAYMENT_METHOD
        FROM MEMBERSHIP m
        JOIN MEMBER mem ON m.MEMBER_ID = mem.MEMBER_ID
        JOIN ADMIN ca ON m.CREATED_BY = ca.ADMIN_ID
        LEFT JOIN ADMIN ua ON m.UPDATED_BY = ua.ADMIN_ID
        WHERE
            MEMBERSHIP_ID = #{membershipId}
    </select>

    <!-- MEMBERSHIP_ID로 회원권 조회 -->
    <select id="selectMembershipDetailById" resultType="com.project.gym.dto.membership.MembershipDetailDTO">
        SELECT
            m.MEMBERSHIP_ID,
            m.MEMBER_ID,
            mem.MEMBER_NAME,
            m.MEMBERSHIP_TYPE,
            m.PERIOD_DAYS,
            m.START_DATE,
            m.END_DATE,
            m.PRICE,
            m.MEMBERSHIP_STATUS,
            m.CREATED_AT,
            m.UPDATED_AT,
            m.CREATED_BY,
            ca.ADMIN_NAME AS CREATED_BY_NAME,
            m.UPDATED_BY,
            ua.ADMIN_NAME AS UPDATED_BY_NAME,
            m.PAYMENT_METHOD
        FROM MEMBERSHIP m
        JOIN MEMBER mem ON m.MEMBER_ID = mem.MEMBER_ID
        JOIN ADMIN ca ON m.CREATED_BY = ca.ADMIN_ID
        LEFT JOIN ADMIN ua ON m.UPDATED_BY = ua.ADMIN_ID
        WHERE
            MEMBERSHIP_ID = #{membershipId}
    </select>

    <!-- MEMBERSHIP 테이블 수정 -->
    <update id="updateMembership" parameterType="com.project.gym.domain.Membership">
        UPDATE MEMBERSHIP
        SET
            START_DATE = #{startDate, jdbcType=DATE},
            END_DATE = #{endDate, jdbcType=DATE},
            UPDATED_AT = SYSDATE,
            UPDATED_BY = #{updatedBy},
            PAYMENT_METHOD = #{paymentMethod}
        WHERE
            MEMBERSHIP_ID = #{membershipId}
    </update>

    <!-- MEMBERSHIP 환불 -->
    <update id="refundMembership">
        UPDATE MEMBERSHIP
        SET
            MEMBERSHIP_STATUS = 'REFUND',
            UPDATED_AT = SYSDATE,
            UPDATED_BY = #{updatedBy}
        WHERE
            MEMBERSHIP_ID = #{membershipId}
    </update>

    <!-- membershipStatus == 1(이용중) & 2(정지) 상태인 경우만 조회 -->
    <select id="findAllActiveMemberships" resultType="com.project.gym.domain.Membership">
        SELECT
            m.MEMBERSHIP_ID,
            m.MEMBER_ID,
            mem.MEMBER_NAME,
            m.MEMBERSHIP_TYPE,
            m.PERIOD_DAYS,
            m.START_DATE,
            m.END_DATE,
            m.PRICE,
            m.MEMBERSHIP_STATUS,
            m.CREATED_AT,
            m.UPDATED_AT,
            m.CREATED_BY,
            m.UPDATED_BY,

            ca.ADMIN_NAME AS CREATED_BY_NAME,
            ua.ADMIN_NAME AS UPDATED_BY_NAME,
            m.PAYMENT_METHOD
        FROM MEMBERSHIP m
        JOIN MEMBER mem ON m.MEMBER_ID = mem.MEMBER_ID
        JOIN ADMIN ca ON m.CREATED_BY = ca.ADMIN_ID
        LEFT JOIN ADMIN ua ON m.UPDATED_BY = ua.ADMIN_ID
        WHERE
            m.MEMBERSHIP_STATUS = 'ACTIVE' OR m.MEMBERSHIP_STATUS = 'SUSPENDED'
    </select>

    <!-- 이용기간 지난 회원권 상태 종료(FINISHED)로 변경 -->
    <update id="markMembershipsAsExpired">
        UPDATE MEMBERSHIP
        SET
            MEMBERSHIP_STATUS = 'FINISHED',
            UPDATED_AT = SYSDATE
        WHERE MEMBERSHIP_ID IN
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </update>
    
    <!-- 정지 선택시 : MEMBERSHIP 테이블 수정 (EXTENDED_END_DATE 설정) -->
    <update id="updateStatusAndExtendedEndDate" parameterType="com.project.gym.domain.Membership">
        UPDATE MEMBERSHIP
        SET
            MEMBERSHIP_STATUS = 'SUSPENDED',
            EXTENDED_END_DATE = #{extendedEndDate, jdbcType=DATE},
            UPDATED_AT = SYSDATE,
            UPDATED_BY = #{updatedBy}
        WHERE MEMBERSHIP_ID = #{membershipId}
    </update>
    



</mapper>