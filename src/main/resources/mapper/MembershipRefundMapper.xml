<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.project.gym.mapper.MembershipRefundMapper">

    <!-- 환불 등록 -->
    <insert id="insertRefund" parameterType="com.project.gym.domain.MembershipRefundHistory">
        <!-- REFUND_ID 값을 먼저 시퀀스에서 얻고 -->
        <selectKey keyProperty="refundId" resultType="long" order="BEFORE">
            SELECT SEQ_REFUND_HISTORY.NEXTVAL FROM DUAL
        </selectKey>

        INSERT INTO MEMBERSHIP_REFUND_HISTORY (
            REFUND_ID,
            MEMBERSHIP_ID,
            REQUESTED_AT,
            REQUESTED_BY,
            REFUND_REASON,
            REFUND_STATUS
        ) VALUES (
            #{refundId},
            #{membershipId, jdbcType=NUMERIC},
            SYSDATE,
            #{requestedBy, jdbcType=NUMERIC},
            #{refundReason, jdbcType=VARCHAR},
            'REQUESTED'
        )
    </insert>

    <!-- 환불 목록 - 전체 -->
    <select id="selectRefundListByKeyword" resultType="com.project.gym.dto.membership.refund.RefundListDTO">
        SELECT
            r.REFUND_ID,
            r.MEMBERSHIP_ID,
            r.REQUESTED_AT,
            r.REQUESTED_BY,
            rm.MEMBER_NAME AS REQUESTED_BY_NAME,

            r.REFUND_REASON,
            r.APPROVED_AT,
            r.APPROVED_BY,
            aa.ADMIN_NAME AS APPROVED_BY_NAME,

            r.REJECTED_AT,
            r.REJECTED_BY,
            rj.ADMIN_NAME AS REJECTED_BY_NAME,

            r.REJECT_REASON,
            r.REFUND_AMOUNT,
            r.REVIEWED_AT,
            r.REVIEWED_BY,
            rv.ADMIN_NAME AS REVIEWED_BY_NAME,

            r.REFUND_STATUS,
            mem.MEMBER_NAME AS MEMBER_NAME,
            m.MEMBERSHIP_TYPE AS MEMBERSHIP_TYPE

        FROM MEMBERSHIP_REFUND_HISTORY r
        JOIN MEMBERSHIP m ON r.MEMBERSHIP_ID = m.MEMBERSHIP_ID
        JOIN MEMBER mem ON m.MEMBER_ID = mem.MEMBER_ID
        JOIN MEMBER rm ON r.REQUESTED_BY = rm.MEMBER_ID
        LEFT JOIN ADMIN aa ON r.APPROVED_BY = aa.ADMIN_ID
        LEFT JOIN ADMIN rj ON r.REJECTED_BY = rj.ADMIN_ID
        LEFT JOIN ADMIN rv on r.REVIEWED_BY = rv.ADMIN_ID

        <where>
            <if test="searchType == 'name' and keyword != null and keyword != ''">
                mem.MEMBER_NAME LIKE '%' || #{keyword} || '%'
            </if>

            <if test="searchType == 'membershipType' and keyword != null and keyword != ''">
                m.MEMBERSHIP_TYPE LIKE '%' || #{keyword} || '%'
            </if>

            <if test="actorRole == 'MEMBER'">
                mem.MEMBER_ID = #{memberId}
            </if>
        </where>
        ORDER BY REFUND_ID DESC
    </select>

    <!-- 환불 상세 -->
    <select id="selectRefundDetailById" resultType="com.project.gym.dto.membership.refund.RefundDetailDTO">
        SELECT
            r.REFUND_ID,
            r.MEMBERSHIP_ID,
            r.REQUESTED_AT,
            r.REQUESTED_BY,
            rm.MEMBER_NAME AS REQUESTED_BY_NAME,

            r.REFUND_REASON,
            r.APPROVED_AT,
            r.APPROVED_BY,
            aa.ADMIN_NAME AS APPROVED_BY_NAME,

            r.REJECTED_AT,
            r.REJECTED_BY,
            rj.ADMIN_NAME AS REJECTED_BY_NAME,

            r.REJECT_REASON,
            r.REFUND_AMOUNT,
            r.REVIEWED_AT,
            r.REVIEWED_BY,
            rv.ADMIN_NAME AS REVIEWED_BY_NAME,

            r.REFUND_STATUS,
            mem.MEMBER_NAME AS MEMBER_NAME,
            m.MEMBERSHIP_TYPE AS MEMBERSHIP_TYPE

        FROM MEMBERSHIP_REFUND_HISTORY r
        JOIN MEMBERSHIP m ON r.MEMBERSHIP_ID = m.MEMBERSHIP_ID
        JOIN MEMBER mem ON m.MEMBER_ID = mem.MEMBER_ID
        JOIN MEMBER rm ON r.REQUESTED_BY = rm.MEMBER_ID
        LEFT JOIN ADMIN aa ON r.APPROVED_BY = aa.ADMIN_ID
        LEFT JOIN ADMIN rj ON r.REJECTED_BY = rj.ADMIN_ID
        LEFT JOIN ADMIN rv on r.REVIEWED_BY = rv.ADMIN_ID
        WHERE
            REFUND_ID = #{refundID}
    </select>

    <!-- MembershipRefundHistory 값 받기 by refundId -->
    <select id="selectRefundHistoryById" resultType="com.project.gym.domain.MembershipRefundHistory">
        SELECT *
        FROM MEMBERSHIP_REFUND_HISTORY
        WHERE REFUND_ID = #{refundId}
    </select>

    <!-- 환불 상태 - 검토중(PENDING)으로 변경 -->
    <update id="updateRefundStatusToPending">
        UPDATE MEMBERSHIP_REFUND_HISTORY
        SET
            REFUND_STATUS = 'PENDING',
            REVIEWED_AT = SYSDATE,
            REVIEWED_BY = #{reviewedBy}
        WHERE
            REFUND_ID = #{refundId}
    </update>

</mapper>
